import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const numOfColRows = 50;
const token = localStorage.getItem('crosstixToken');
const initialState = {
  isLoggedIn: (token) ? true : false,
  token: token
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const signUserIn = createAsyncThunk(
  'users/signin',
  async info => {
    const { email, password } = info;
    const response = await axios.post('/api/signin', {
      email: email,
      password: password
    })
    return response.data
  }
)

export const authSlice = createSlice({
  name: 'authInfo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logUserIn: state => {
      state.isLoggedIn = true;
    },
    logUserOut: state => {
      state.isLoggedIn = false;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(signUserIn.fulfilled, (state, action) => {
      if (action.payload.token) {
        state.isLoggedIn = true;
        localStorage.setItem('crosstixToken', action.payload.token)
      }
    })
  },
});

export const { logUserOut } = authSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

//export const isLoggedIn = state => state.isLoggedIn.value;
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;
